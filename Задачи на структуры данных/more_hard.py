# 1
# Выведите координаты наиболее удаленной от начала координат точки.
def max_dist_from_00(point):
  max_dist=0
  max_x=0
  max_y=0
  import math
  for i in range(point):
    x=int(input("X   "))
    y=int(input("Y   "))
    dist=math.sqrt(x**2+y**2)
    if dist>max_dist:
      max_x=x
      max_y=y
  print(max_x,max_y,sep=' ')
max_dist_from_00(3)

#2
#  Выведите все исходные точки в порядке возрастания их расстояний от начала координат.
def dist_from_00_sort(point):
  max_dist=0
  dists={}
  import math
  for i in range(point):
    x=int(input("X   "))
    y=int(input("Y   "))
    dist=math.sqrt(x**2+y**2)
    dists[dist]=str(str(x)+" "+str(y))
  list_keys = list(dists.keys())
  list_keys.sort()
  for i in list_keys:
    print(dists[i])

dist_from_00_sort(3)

# 3
#  Среди исходных точек найдите три, образующие треугольник с максимальным периметром. Выведите данный периметр.
# Входные данные
# Программа получает на вход набор точек на плоскости. Сначала задано количество точек n (2<n<101), затем идет последовательность из n строк, каждая из которых содержит два числа: координаты точки. Все исходные координаты – целые числа, не превосходящие 103.
# Выходные данные
# Необходимо вывести  найденный периметр с точностью в 15 значащих цифр.







# Определите средний балл всех учащихся по каждому предмету.

# Входные данные
# Заданы сначала количество учащихся n, затем n строк, каждая из которых содержит фамилию, имя и три числа (оценки по трем предметам: математике, физике, информатике). Данные в строке разделены одним пробелом. Оценки принимают значение от 1 до 5.

# Выходные данные
# Выведите три действительных числа: средний балл всех учащихся по математике, по физике, по информатике.
# Примеры
# Входные данные
# 2
# Markov Valeriy 4 5 2
# Kozlov Georgiy 5 1 2
# Выходные данные
# 4.5 3 2 
def sr_arifm_3el(n): 
  # Введите колво учеников -n
  sr_math=0
  sr_phisic=0
  sr_info=0
  for i in range(0,n):
    person = str(input("введите фамилию ,имя ,оценка(математика,физика, информатика)через пробелы   "))
    person_mass=person.split()
    sr_math+=int(person_mass[2])
    sr_phisic+=int(person_mass[3])
    sr_info+=int(person_mass[4])
  sr_math/=n
  sr_phisic/=n
  sr_info/=n
  print(sr_math,sr_phisic,sr_info,sep=' ')
sr_arifm_3el(2)



# Выведите фамилии и имена учащихся в порядке убывания их среднего балла.

# Входные данные
# Заданы сначала количество учащихся n, затем n строк, каждая из которых содержит фамилию, имя и три числа (оценки по трем предметам: математике, физике, информатике). Данные в строке разделены одним пробелом. Оценки принимают значение от 1 до 5.

# Общее число учащихся не превосходит 100001.
# Выходные данные
# Необходимо вывести пары фамилия-имя по одной на строке, разделяя фамилию и имя одним пробелом. Выводить оценки не нужно. Если несколько учащихся имеют одинаковые средние баллы, то их нужно выводить в порядке, заданном во входных данных.
def list_more_clever(n): 
  # Введите колво учеников -n
  all_achiv={}
  for i in range(0,n):
    person = str(input("введите фамилию ,имя ,оценка(математика,физика, информатика)через пробелы   "))
    person_mass=person.split()
    sr_arifm=int((int(person_mass[2])+int(person_mass[3])+int(person_mass[4]))//3)
    all_achiv[str(person_mass[0]+" "+person_mass[1])]=sr_arifm
  sorted_val=sorted(all_achiv.values())[::-1]
  for i in sorted_val:
    for key,value in all_achiv.items():
      if i== value:
        print(key)
list_more_clever(3)

# Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь dd и два числа: keykey и valuevalue.
# Если ключ keykey есть в словаре dd, то добавьте значение valuevalue в список, который хранится по этому ключу.
# Если ключа keykey нет в словаре, то нужно добавить значение в список по ключу 2 * key2∗key. Если и ключа 2 * key2∗key нет, то нужно добавить ключ 2 * key2∗key в словарь и сопоставить ему список из переданного элемента [value][value].
# Требуется реализовать только эту функцию, кода вне неё не должно быть.
# Функция не должна вызывать внутри себя функции input и print.
# Пример работы функции:
# d = {}
# print(update_dictionary(d, 1, -1))  # None
# print(d)                            # {2: [-1]}
# update_dictionary(d, 2, -2)
# print(d)                            # {2: [-1, -2]}
# update_dictionary(d, 1, -3)
# print(d)                            # {2: [-1, -2, -3]}
d={}
def update_dictionary(d, key, value):
  if key in d:
    d[key]=[d[key],value]
  elif 2*key in d:
    d[2*key]=[d[2*key],value]
  else:d[2*key]=[value]
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)         # {2: [-1, -2, -3]}
print(d)               
# Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.

# Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.

# Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
# Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.
def count_words(list_w):
  d={}
  for el in list_w:
    d[el]+=1
  for key,value in d.items():
    print(key,value,sep=' ')
count_words(['a' ,'aa' ,'abC', 'aa', 'ac' ,'abc' ,'bcd' ,'a'])

def count_words(list_w):
  d={}
  for el in list_w:
    d[el]+=1
  for key,value in d.items():
    print(key,value,sep=' ')
count_words(['a' ,'aa' ,'abC', 'aa', 'ac' ,'abc' ,'bcd' ,'a'])